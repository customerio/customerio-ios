// swiftlint:disable all

import Foundation
{% for importModule in argument.imports|split:"-" %}
import {{ importModule }}
{% endfor %}

// File generated from Sourcery-DI project: https://github.com/levibostian/Sourcery-DI
// Template version 1.0.0

/**
######################################################
Documentation
######################################################

This automatically generated file you are viewing is a dependency injection graph for your app's source code.
You may be wondering a couple of questions. 

1. How did this file get generated? Answer --> https://github.com/levibostian/Sourcery-DI#how
2. Why use this dependency injection graph instead of X other solution/tool? Answer --> https://github.com/levibostian/Sourcery-DI#why-use-this-project
3. How do I add dependencies to this graph file? Follow one of the instructions below:
* Add a non singleton class: https://github.com/levibostian/Sourcery-DI#add-a-non-singleton-class
* Add a generic class: https://github.com/levibostian/Sourcery-DI#add-a-generic-class
* Add a singleton class: https://github.com/levibostian/Sourcery-DI#add-a-singleton-class
* Add a class from a 3rd party library/SDK: https://github.com/levibostian/Sourcery-DI#add-a-class-from-a-3rd-party
* Add a `typealias` https://github.com/levibostian/Sourcery-DI#add-a-typealias

4. How do I get dependencies from the graph in my code? 
```
// If you have a class like this:
class OffRoadWheels {}

class ViewController: UIViewController {
    // Call the property getter to get your dependency from the graph: 
    let wheels = DI{{ argument.moduleName }}.shared.offRoadWheels
    // note the name of the property is name of the class with the first letter lowercase. 

    // you can also use this syntax instead:
    let wheels: OffRoadWheels = DI{{ argument.moduleName }}.shared.inject(.offRoadWheels)
    // although, it's not recommended because `inject()` performs a force-cast which could cause a runtime crash of your app. 
}
```

5. How do I use this graph in my test suite? 
```
let mockOffRoadWheels = // make a mock of OffRoadWheels class 
DI{{ argument.moduleName }}.shared.override(.offRoadWheels, mockOffRoadWheels) 
```

Then, when your test function finishes, reset the graph:
```
DI{{ argument.moduleName }}.shared.resetOverrides()
```

*/

/** 
 enum that contains list of all dependencies in our app. 
 This allows automated unit testing against our dependency graph + ability to override nodes in graph. 
 */
{{ argument.diAccessLevel }} enum Dependency{{ argument.moduleName }}: CaseIterable {
    {# types.all to support classes, enums, structs, custom injecting, etc. #}
    {% for dep in types.all where dep|annotated:"InjectRegister" %}
    case {{ dep.annotations["InjectRegister"]|lowerFirstLetter }}
    {% endfor %}
}

{# Used to create the property getter to get the dependency from the graph #}
{# Note: We use this for when an InjectCustom exists because custom requires the use of an extension to add the property to the graph. We don't want the developer to be responsible for returning an override for tests. This function exists as the 1 true way to get a dependency from the graph to be safe to use as it gets overrides. #}
{% macro overrideGetterProperty class type isCustom %}
    {{ type.accessLevel }} var {{ class|lowerFirstLetter }}: {{ class }} {    
        if let overridenDep = self.overrides[.{{ class|lowerFirstLetter }}] {
            return overridenDep as! {{ class }}
        }
        {% if isCustom %}
        return self.custom{{ class }}
        {% else %}
        return self.new{{ class }}
        {% endif %}    
    }
{% endmacro %}

/**
 Dependency injection graph specifically with dependencies in the {{ argument.moduleName }} module. 

 We must use 1+ different graphs because of the hierarchy of modules in this SDK. 
 Example: You can't add classes from `Tracking` module in `Common`'s DI graph. However, classes 
 in `Common` module can be in the `Tracking` module. 
 */
{{ argument.diAccessLevel }} class DI{{ argument.moduleName }} {
    {# Singleton DI graph #}
    {{ argument.diAccessLevel }} static var shared: DI{{ argument.moduleName }} = DI{{ argument.moduleName }}()
    {# Override a dependency. Used in testing, only #}
    private var overrides: [Dependency{{ argument.moduleName }}: Any] = [:]
    
    private init() {
    }

    /**
    Designed to be used only in test classes to override dependencies. 

    ```
    let mockOffRoadWheels = // make a mock of OffRoadWheels class 
    DI{{ argument.moduleName }}.shared.override(.offRoadWheels, mockOffRoadWheels) 
    ```
    */
    {{ argument.diAccessLevel }} func override<Value: Any>(_ dep: Dependency{{ argument.moduleName }}, value: Value, forType type: Value.Type) {
        overrides[dep] = value 
    }

    /**
    Reset overrides. Meant to be used in `tearDown()` of tests. 
    */
    {{ argument.diAccessLevel }} func resetOverrides() {        
        overrides = [:]
    }

    /**
    Use this generic method of getting a dependency, if you wish. 
    */
    {{ argument.diAccessLevel }} func inject<T>(_ dep: Dependency{{ argument.moduleName }}) -> T {                            
        switch dep {
            {% for dep in types.all where dep|annotated:"InjectRegister" %}
            case .{{ dep.annotations["InjectRegister"]|lowerFirstLetter }}: return self.{{ dep.annotations["InjectRegister"]|lowerFirstLetter }} as! T 
            {% endfor %}                
        }
    }

    /**
    Use the property accessors below to inject pre-typed dependencies. 
    */

    {# below, types.class used to be used but typealiases would not be included. if things break, need to fix that. #}
    {% for dep in types.all where dep|annotated:"InjectRegister" %}
    {% set class %}{{ dep.annotations["InjectRegister"] }}{% endset %}
    
    {% if dep|annotated:"InjectCustom" %}
    // {{ class }} (custom. property getter provided via extension)
    {% call overrideGetterProperty class dep true %}
    {% elif dep|annotated:"InjectSingleton" %}    
    // {{ class }} (singleton)
    {% call overrideGetterProperty class dep false %}
    {# Use a DispatchQueue to make singleton thread safe #}
    private let _{{ class|lowerFirstLetter }}_queue = DispatchQueue(label: "DI_get_{{ class|lowerFirstLetter }}_queue")
    private var _{{ class|lowerFirstLetter }}_shared: {{ class }}?
    {{ dep.accessLevel }} var {{ class|lowerFirstLetter }}: {{ class }} {
        return _{{ class|lowerFirstLetter }}_queue.sync {
            if let overridenDep = self.overrides[.{{ class|lowerFirstLetter }}] {
                return overridenDep as! {{ class }}
            }
            let res = _{{ class|lowerFirstLetter }}_shared ?? _get_{{ class|lowerFirstLetter }}()
            _{{ class|lowerFirstLetter }}_shared = res
            return res
        }
    }
    private func _get_{{ class|lowerFirstLetter }}() -> {{ class }} {
        return {{ dep.name }}({% for initializer in dep.initializers %}{% if not initializer.isConvenienceInitializer %}{% for param in initializer.parameters %}{{ param.name }}: self._{{ param.typeName|lowerFirstLetter }}{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %}{% endfor %})
    }
    {% else %}
    // {{ class }}
    {% call overrideGetterProperty class dep false %}
    private var new{{ class }}: {{ class }} {    
        return {{ dep.name}}({% for initializer in dep.initializers %}{% if not initializer.isConvenienceInitializer %}{% for param in initializer.parameters %}{{ param.name }}: self.{{ param.typeName|lowerFirstLetter }}{% if not forloop.last%}, {% endif %}{% endfor %}{% endif %}{% endfor %})
    }
    {% endif %}
    {% endfor %} 
}
