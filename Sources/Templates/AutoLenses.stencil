// swiftlint:disable variable_name
// swiftlint:disable trailing_newline

import Foundation

infix operator *~: MultiplicationPrecedence
infix operator |>: AdditionPrecedence

struct Lens<Whole, Part> {
    let get: (Whole) -> Part
    let set: (Part, Whole) -> Whole
}

func * <A, B, C> (lhs: Lens<A, B>, rhs: Lens<B, C>) -> Lens<A, C> {
    return Lens<A, C>(
        get: { a in rhs.get(lhs.get(a)) },
        set: { (c, a) in lhs.set(rhs.set(c, lhs.get(a)), a) }
    )
}

func *~ <A, B> (lhs: Lens<A, B>, rhs: B) -> (A) -> A {
    return { a in lhs.set(rhs, a) }
}

func |> <A, B> (x: A, f: (A) -> B) -> B {
    return f(x)
}

func |> <A, B, C> (f: @escaping (A) -> B, g: @escaping (B) -> C) -> (A) -> C {
    return { g(f($0)) }
}

{% for type in types.implementing.AutoLenses|struct %}
extension {{ type.name }} {
{% for variable in type.storedVariables %}
  static let {{ variable.name }}Lens = Lens<{{type.name}}, {{variable.typeName}}>(
    get: { $0.{{variable.name}} },
    set: { {{variable.name}}, existing in
       {{type.name}}({% for argument in type.storedVariables %}{{argument.name}}: {% if variable.name == argument.name %}{{variable.name}}{% else %}existing.{{argument.name}}{% endif %}{{ ', ' if not forloop.last }}{% endfor %})
    }
  ){% endfor %}

  // Convenient set functions to edit a property of the immutable object
{% for variable in type.storedVariables %}
  func {{ variable.name }}Set(_ {{variable.name}}: {{variable.typeName}}) -> {{type.name}} {
    {{type.name}}({% for argument in type.storedVariables %}{{argument.name}}: {% if variable.name == argument.name %}{{variable.name}}{% else %}self.{{argument.name}}{% endif %}{{ ', ' if not forloop.last }}{% endfor %})
  }
{% endfor %}
}
{% endfor %}