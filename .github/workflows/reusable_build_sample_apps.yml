name: Reusable build sample apps

on:
  workflow_call:
    inputs:
      use_latest_sdk_version:
        description: "Whether this workflow should build sample apps with the latest SDK version"
        type: boolean
        required: false
        default: false
    secrets:
      GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64:
        required: true
        description: "Base64-encoded service account for code signing (match) used by Fastlane."
      FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64:
        required: false
        description: "Base64-encoded service account for Firebase App Distribution (optional)."
      CUSTOMERIO_APN_WORKSPACE_SITE_ID:
        required: true
        description: "Secret for the APN sample app's Site ID in Customer.io."
      CUSTOMERIO_APN_WORKSPACE_CDP_API_KEY:
        required: true
        description: "Secret for the APN sample app's CDP API key in Customer.io."
      CUSTOMERIO_FCM_WORKSPACE_SITE_ID:
        required: true
        description: "Secret for the FCM sample app's Site ID in Customer.io."
      CUSTOMERIO_FCM_WORKSPACE_CDP_API_KEY:
        required: true
        description: "Secret for the FCM sample app's CDP API key in Customer.io."
      SAMPLE_APPS_APN_FIREBASE_APP_ID:
        required: true
        description: "Secret for the APN sample app's Firebase App ID."
      SAMPLE_APPS_FCM_FIREBASE_APP_ID:
        required: true
        description: "Secret for the FCM sample app's Firebase App ID."
      SAMPLE_APPS_INSTRUCTIONS_GUIDE_LINK:
        required: true
        description: "Secret for the link to the instructions guide for the sample apps."
      SLACK_NOTIFY_RELEASES_WEBHOOK_URL:
        required: true
        description: "Secret for the Slack webhook URL to notify about sample app releases."

jobs:
  build_sample_apps:
    runs-on: macos-14
    name: Building iOS sample apps
    strategy:
      fail-fast: false
      matrix:
        sample-app:
          - "APN-UIKit"
          - "CocoaPods-FCM"
        include:
          - sample-app: "APN-UIKit"
            apn-or-fcm: "APN"
            cio-siteid-secret-key: "CUSTOMERIO_APN_WORKSPACE_SITE_ID"
            cio-cdpapikey-secret-key: "CUSTOMERIO_APN_WORKSPACE_CDP_API_KEY"
            cio-workspace-name: "Mobile: Native iOS & Android"
            firebase-app-id: "SAMPLE_APPS_APN_FIREBASE_APP_ID"
          - sample-app: "CocoaPods-FCM"
            apn-or-fcm: "FCM"
            cio-siteid-secret-key: "CUSTOMERIO_FCM_WORKSPACE_SITE_ID"
            cio-cdpapikey-secret-key: "CUSTOMERIO_FCM_WORKSPACE_CDP_API_KEY"
            cio-workspace-name: "Mobile: xiOS CocoaPods FCM + Kotlin Android"
            firebase-app-id: "SAMPLE_APPS_FCM_FIREBASE_APP_ID"

    steps:
      - name: Check out code (with full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest SDK version if requested
        if: ${{ inputs.use_latest_sdk_version == true }}
        id: latest-sdk-version-step
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=$latest_tag" >> "$GITHUB_ENV"
          echo "Found latest tag: $latest_tag"

      - name: Replace local references with published SDK version
        if: ${{ inputs.use_latest_sdk_version == true }}
        shell: bash
        run: |
          brew install sd # if not already installed earlier
          TAG="${{ env.LATEST_TAG }}"
          echo "Switching local references to published version: $TAG"

          # 1) CocoaPods Podfile in `Apps/CocoaPods-FCM/Podfile`
          # Example lines to replace:
          #   pod 'CustomerIODataPipelines', :path => ...
          #   =>  pod 'CustomerIODataPipelines', '1.2.3'
          sd "pod 'CustomerIODataPipelines', :path =>.*" "pod 'CustomerIODataPipelines', '$TAG'" "Apps/CocoaPods-FCM/Podfile"
          sd "pod 'CustomerIOMessagingPushAPN', :path =>.*" "pod 'CustomerIOMessagingPushAPN', '$TAG'" "Apps/CocoaPods-FCM/Podfile"
          sd "pod 'CustomerIOMessagingInApp', :path =>.*" "pod 'CustomerIOMessagingInApp', '$TAG'" "Apps/CocoaPods-FCM/Podfile"
          # If you have other modules: repeat

          # 2) SwiftPM package in `Apps/Common/Package.swift`
          # Original: .package(path: "../../")
          # Replace with pinned remote version
          sd '\.package\(path: *".*\)' \
             ".package(name: \"customerio-ios\", url: \"https://github.com/customerio/customerio-ios.git\", .upToNextMajor(from: \"${TAG}\"))" \
             "Apps/Common/Package.swift"

          echo "Finished updating references. Now we have pinned SDK version $TAG."

      - name: Set Default Firebase Distribution Groups
        shell: bash
        env:
          ALL_BUILDS_GROUP: all-builds
          FEATURE_BUILDS_GROUP: feature-branch
          NEXT_BUILDS_GROUP: next
          PUBLIC_BUILDS_GROUP: public
          CURRENT_BRANCH: ${{ github.ref }}
          IS_PRIMARY_APP: ${{ matrix.apn-or-fcm == 'APN' }}
        run: |
          distribution_groups=("$ALL_BUILDS_GROUP")

          if [[ "$IS_PRIMARY_APP" == "true" ]]; then
            [[ "$CURRENT_BRANCH" == "refs/heads/feature/"* ]] && distribution_groups+=("$FEATURE_BUILDS_GROUP")
            [[ "$CURRENT_BRANCH" == "refs/heads/main" ]] && distribution_groups+=("$NEXT_BUILDS_GROUP")

            if [[ "${{ inputs.use_latest_sdk_version }}" == "true" ]]; then
              distribution_groups+=("$PUBLIC_BUILDS_GROUP")
            fi
          fi

          echo "firebase_distribution_groups=$(IFS=','; echo "${distribution_groups[*]}")" >> $GITHUB_ENV

      - name: Prepare Fastlane Build Arguments
        id: prepare-fastlane
        shell: bash
        run: |
          distribution_groups="\"distribution_groups\":\"${{ env.firebase_distribution_groups }}\""
          if [ "${{ inputs.use_latest_sdk_version }}" = "true" ]; then
            sdk_version="\"app_version\":\"${{ env.LATEST_TAG }}\",\"build_number\":\"1\""
            fastlane_build_args="{${distribution_groups},${sdk_version}}"
          else
            fastlane_build_args="{${distribution_groups}}"
          fi
          echo "fastlane_build_args=$fastlane_build_args" >> $GITHUB_ENV

      - name: Determine SDK Version
        run: |
          if [[ "${{ inputs.use_latest_sdk_version }}" == "true" ]]; then
            echo "CUSTOMERIO_SDK_VERSION=${LATEST_TAG}" >> $GITHUB_ENV
          else
            echo "CUSTOMERIO_SDK_VERSION=" >> $GITHUB_ENV
          fi

      - name: Build sample app
        uses: ./.github/actions/build-sample-app
        with:
          apn-or-fcm: ${{ matrix.apn-or-fcm }}
          sample-app: ${{ matrix.sample-app }}
          customerio-workspace-siteid: ${{ secrets[matrix.cio-siteid-secret-key] }}
          customerio-workspace-cdp-api-key: ${{ secrets[matrix.cio-cdpapikey-secret-key] }}
          customerio-workspace-name: ${{ matrix.cio-workspace-name }}
          customerio-public-sdk-version: ${{ env.CUSTOMERIO_SDK_VERSION }}
          firebase-app-id: ${{ secrets[matrix.firebase-app-id] }}
          instructions-guide-link: ${{ secrets.SAMPLE_APPS_INSTRUCTIONS_GUIDE_LINK }}
          GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
          FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          fastlane-build-args: ${{ env.fastlane_build_args }}