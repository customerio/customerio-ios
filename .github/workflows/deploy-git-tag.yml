name: Deploy git tag  

# Only run after a pull request has been merged. This is because
# bot account runs write operations on the github repo to push a tag. 
on:
  push:
    branches: [main, beta, alpha]

jobs:
  deploy-sdk:
    name: Deploy git tag
    runs-on: ubuntu-latest
    steps:    
      - name: semantic-release setup
        uses: levibostian/action-semantic-release-justwork@v1
      
      # Semantic-release tool is used to:
      # 1. Determine the next semantic version for the software during deployment. 
      #    For example, if the last deployment you made was version 1.3.5 and you are releasing a new feature 
      #    in this deployment, semantic release will automatically determine the version is 1.4.0 for this new release you're doing. 
      #    Semantic release is able to do this by viewing commit messages since the last release. That's why this project uses a 
      #    specific commit message format during pull requests.
      # 2. Updates metadata files. Such as updating the version number in package.json and adding entries to CHANGELOG.md file. 
      # 3. Create git tag and push it to github. 
      - name: Deploy git tag via semantic-release 
        uses: cycjimmy/semantic-release-action@v2
        id: semantic-release
        with: 
          # version numbers below can be in many forms: M, M.m, M.m.p
          semantic_version: 18
          extra_plugins: |
            conventional-changelog-conventionalcommits@4
            @semantic-release/changelog@6
            @semantic-release/git@10
            @semantic-release/github@8
            @semantic-release/exec@6
        env:
          # Needs to push git commits to repo. Needs write access. 
          # github access token to Ami CI shared github account. 
          # token scoped to just public repositories and is added as a collaborator to the project so it can push code. 
          GITHUB_TOKEN: ${{ secrets.WRITE_ACCESS_BOT_TOKEN }}
          
      # This step is required before the action-sync-branches step as a merge commit might be made. 
      - name: Prepare to sync branches 
        # user.email is a private email address. This is required by GitHub or we will not be able to push commits to github. 
        # Find private email address that github uses for CI account at: https://github.com/settings/emails        
        run: |
          git config --global user.email "21171259+ami-ci@users.noreply.github.com"
          git config --global user.name "Ami CI" 
        
      # After a production deployment of the software, the 'main' branch will contain some commits in it that 'develop'
      # branch does not contain. These commits in 'main' are from all of the alpha, beta, and production deployments made. 
      # We need these commits to be merged into 'develop'. If we do not, semantic-release tool will error. The tool requires
      # git commits and git tags to be in the current branch in order to determine the next semantic version of the software. 
      - name: Copy commits into develop after main deployment 
        uses: levibostian/action-sync-branches@v1
        with:
          behind: develop
          ahead: main 
          # github access token to Ami CI shared github account. 
          # token scoped to just public repositories and is added as a collaborator to the project so it can push code. 
          githubToken: ${{ secrets.WRITE_ACCESS_BOT_TOKEN }}

      - name: Notify team of git tag being created 
        uses: slackapi/slack-github-action@v1.18.0        
        if: steps.semantic-release.outputs.new_release_published == 'true' # only run if a git tag was made. 
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK git tag created",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK git tag created successfully and deployed to Swift Package Manager! (deployment step 1 of 2)"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Version ${{ steps.semantic-release.outputs.new_release_version }}*\niOS SDK deployment progress:\n ~1. <https://github.com/${{github.repository}}/releases/tag/${{steps.semantic-release.outputs.new_release_version}}|create git ta and deploy to Swift Package Manager>~\n2. deploy to cocoapods\n\n"
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel. 
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
      - name: Notify team of failure 
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ failure() }} # only run this if any previous step failed 
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK deployment failure",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK deployment :warning: failure :warning:"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "iOS SDK failed deployment during step *create git tag*. View <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|CI server logs> to learn why and fix the issue. <https://github.com/customerio/mobile/blob/main/GIT-WORKFLOW.md|Learn more about the deployment process and how to fix errors>."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel. 
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK  