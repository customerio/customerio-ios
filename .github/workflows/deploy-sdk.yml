name: Deploy SDK

on:
  push:
    branches: [main, v1] # all branches where deployments currently occur. Make sure this list matches list of branches in  `.releaserc` file. 

permissions:
  contents: write # access to push the git tag
  issues: write # Bot creates an issue if there is an issue during deployment process

jobs:
  deploy-git-tag:
    name: Deploy git tag
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v3

      # Semantic-release tool is used to:
      # 1. Determine the next semantic version for the software during deployment.
      #    For example, if the last deployment you made was version 1.3.5 and you are releasing a new feature
      #    in this deployment, semantic release will automatically determine the version is 1.4.0 for this new release you're doing.
      #    Semantic release is able to do this by viewing commit messages since the last release. That's why this project uses a
      #    specific commit message format during pull requests.
      # 2. Updates metadata files. Such as updating the version number in package.json and adding entries to CHANGELOG.md file.
      # 3. Create git tag and push it to github.
      - name: Deploy git tag via semantic-release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic-release
        with:
          # version numbers below can be in many forms: M, M.m, M.m.p
          semantic_version: 18
          extra_plugins: |
            conventional-changelog-conventionalcommits@4
            @semantic-release/changelog@6
            @semantic-release/git@10
            @semantic-release/github@8
            @semantic-release/exec@6
        env:
          # Needs to push git commits to repo. Needs write access.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify team of git tag being created
        uses: slackapi/slack-github-action@v1.18.0
        if: steps.semantic-release.outputs.new_release_published == 'true' # only run if a git tag was made.
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK git tag created",
              "username": "iOS deployment bot",
              "icon_url": "https://pngimg.com/uploads/apple_logo/apple_logo_PNG19687.png",
              "channel": "#mobile-deployments",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK git tag created successfully and deployed to Swift Package Manager! (deployment step 1 of 2)"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Version ${{ steps.semantic-release.outputs.new_release_version }}*\niOS SDK deployment progress:\n ~1. <https://github.com/${{github.repository}}/releases/tag/${{steps.semantic-release.outputs.new_release_version}}|create git ta and deploy to Swift Package Manager>~\n2. deploy to cocoapods\n\n"
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel.
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify team of failure
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ failure() }} # only run this if any previous step failed
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK deployment failure",
              "username": "iOS deployment bot",
              "icon_url": "https://pngimg.com/uploads/apple_logo/apple_logo_PNG19687.png",
              "channel": "#mobile-deployments",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK deployment :warning: failure :warning:"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "iOS SDK failed deployment during step *create git tag*. View <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|CI server logs> to learn why and fix the issue. <https://github.com/customerio/mobile/blob/main/GIT-WORKFLOW.md|Learn more about the deployment process and how to fix errors>."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel.
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  deploy-cocoapods:
    name: Deploy SDK to Cocoapods
    needs: [deploy-git-tag]
    if: needs.deploy-git-tag.outputs.new_release_published == 'true' # only run if a git tag was made.
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v2
      - name: Install cocoapods
        run: gem install cocoapods
      - name: Push CustomerIOCommon
        run: ./scripts/push-cocoapod.sh CustomerIOCommon.podspec
      - name: Push CustomerIOTracking
        run: ./scripts/push-cocoapod.sh CustomerIOTracking.podspec
      - name: Push CustomerIOMessagingPush
        run: ./scripts/push-cocoapod.sh CustomerIOMessagingPush.podspec
      - name: Push CustomerIOMessagingPushAPN
        run: ./scripts/push-cocoapod.sh CustomerIOMessagingPushAPN.podspec
      - name: Push CustomerIOMessagingPushFCM
        run: ./scripts/push-cocoapod.sh CustomerIOMessagingPushFCM.podspec
      - name: Push CustomerIOMessagingInApp
        run: ./scripts/push-cocoapod.sh CustomerIOMessagingInApp.podspec
      - name: Push CustomerIO
        run: ./scripts/push-cocoapod.sh CustomerIO.podspec

      - name: Notify team of successful deployment
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ success() }}
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK deployed to Maven Central",
              "username": "iOS deployment bot",
              "icon_url": "https://pngimg.com/uploads/apple_logo/apple_logo_PNG19687.png",
              "channel": "#mobile-deployments",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK deployed to Cocoapods! (deployment step 2 of 2)"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Version ${{ github.event.release.tag_name }}*\n\niOS SDK deployment progress:\n ~1. <https://github.com/${{github.repository}}/releases/tag/${{ github.event.release.tag_name }}|create git tag and deploy to Swift Package Manager>~\n~2. deploy to cocoapods~\n\nBecause it's hard to automatically verify cocoapods get deployed, it's recommended to manually verify if cocoapods got deployed successfully by checking for cococapods emails or https://github.com/cocoaPods/specs to see if new commit was added for the release."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel.
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify team of failure
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ failure() }} # only run this if any previous step failed
        with:
          # Use block kit for format of the JSON payloads: https://app.slack.com/block-kit-builder
          payload: |
            {
              "text": "iOS SDK deployment failure",
              "username": "iOS deployment bot",
              "icon_url": "https://pngimg.com/uploads/apple_logo/apple_logo_PNG19687.png",
              "channel": "#mobile-deployments",
              "blocks": [
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*iOS* SDK deployment :warning: failure :warning:"
                      }
                  },
                  {
                      "type": "divider"
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "iOS SDK failed deployment during step *deploy to cocoapods*. View <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|CI server logs> to learn why and fix the issue. <https://github.com/customerio/mobile/blob/main/GIT-WORKFLOW.md|Learn more about the deployment process and how to fix errors>."
                      }
                  }
              ]
            }
        env:
          # Incoming webhook URL that sends message into the correct Slack channel.
          # Help on how to get the webhook URL: https://github.com/marketplace/actions/slack-send#setup-2
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_RELEASES_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
