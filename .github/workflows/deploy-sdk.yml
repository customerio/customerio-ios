name: Deploy SDK

on:
  workflow_dispatch: # manually run this workflow. This allows you to manually deploy things like cococapods, not manually create a git tag. The tag needs to already be created to run this.
    inputs:
      existing-git-tag:
        description: 'Type name of existing git tag (example: 1.0.3) to checkout and manually deploy'
        required: true
        type: string

  push:
    branches: [beta, main, v1, ahmed/ci/sem_release] # all branches where deployments currently occur. Make sure this list matches list of branches in  `.releaserc` file.

permissions:
  contents: write # access to push the git tag

jobs:
  # We can only generate SDK size reports on macOS and we prefer to run deployments on Linux because macOS resources are limited. 
  # Therefore, generating SDK reports is a separate job that runs before deployment.
 
  deploy-git-tag:
    name: Deploy git tag
    runs-on: ubuntu-latest
    outputs:
      new_release_git_head: ${{ steps.semantic-release.outputs.new_release_git_head }}
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need full history and tags for semantic-release to work properly
          fetch-depth: 0

      # Configure Git for semantic-release
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      # CLI to replace strings in files. The CLI recommends using `cargo install` which is slow. This Action is fast because it downloads pre-built binaries.
      # If using sd on macos, "brew install" works great. for Linux, this is the recommended way.
      - name: Install sd CLI to use later in the workflow
        # uses: kenji-miyake/setup-sd@59a1bd7bba077f6c491f04cd9d24b524ea2db4b6 # v1.1.1
        uses: levibostian/setup-sd@cbdeed93d4fe03f9e36b73bb6d9e7c3c4805e1f9 # add-file-extension # Using fork until upstream Action has bug fixed in it.

      # We want to track the SDK binary size for each release. 
      # The reports is pushed by semantic-release action below by including files listed in the `assets` array in the `.releaserc` file.
      - name: Create placeholder for SDK size reports
        run: |
          mkdir -p reports
          echo "SDK size report placeholder - This will be updated in future runs when the generate-sdk-size-report job is working" > reports/sdk-binary-size.txt
          echo "SDK size with dependencies report placeholder - This will be updated in future runs when the generate-sdk-size-report job is working" > reports/sdk-binary-size-including-dependencies.txt
          
          echo "Created placeholder report files for semantic-release"
          
          
      - name: 'Generate token'
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.CIO_APP_ID }}
          private_key: ${{ secrets.CIO_APP_SECRET }}
          
      - name: Setup repository with token
        run: |
          # Configure git to use the token for authentication
          git config --local url."https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/".insteadOf "https://github.com/"
          
          # Verify current remote URL
          echo "Current remotes:"
          git remote -v
          
          # Test authentication with token
          echo "Testing token authentication..."
          git ls-remote --exit-code --heads origin main || echo "Authentication failed!"
          
          # Verify GitHub App permissions
          echo "Verifying GitHub App permissions via API..."
          curl -s -H "Authorization: token ${{ steps.generate_token.outputs.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/installation/repositories" | grep -q "${{ github.repository }}" && \
               echo "✅ GitHub App has access to this repository" || \
               echo "❌ GitHub App might not have proper repository access"
    
      # Semantic-release tool is used to:
      # 1. Determine the next semantic version for the software during deployment.
      #    For example, if the last deployment you made was version 1.3.5 and you are releasing a new feature
      #    in this deployment, semantic release will automatically determine the version is 1.4.0 for this new release you're doing.
      #    Semantic release is able to do this by viewing commit messages since the last release. That's why this project uses a
      #    specific commit message format during pull requests.
      # 2. Updates metadata files. Such as updating the version number in package.json and adding entries to CHANGELOG.md file.
      # 3. Create git tag and push it to github.
      # Debug GitHub token permissions
      - name: Debug token permissions
        run: |
          echo "Token check: Using GitHub App token - Making sure it exists"
          if [ -n "${{ steps.generate_token.outputs.token }}" ]; then
            echo "GitHub App token is present"
            echo "Token first 5 chars: ${TOKEN:0:5}..."
          else
            echo "ERROR: GitHub App token is missing!"
          fi
          
          # Output Git and GitHub configuration
          echo "Current Git Configuration:"
          git config --list
          
          # Output repository info
          echo "Repository info:"
          git remote -v
          git branch
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Prepare for semantic-release
        run: |
          echo "Preparing environment for semantic-release..."
          
          # Create .npmrc file to ensure semantic-release uses the token
          echo "//registry.npmjs.org/:_authToken=${{ steps.generate_token.outputs.token }}" > .npmrc
          echo "@semantic-release:registry=https://registry.npmjs.org/" >> .npmrc
          
          # Create a gitconfig helper to force token usage
          echo '#!/bin/bash
          echo username=x-access-token
          echo "password=${{ steps.generate_token.outputs.token }}"' > ~/git-credentials-helper.sh
          chmod +x ~/git-credentials-helper.sh
          git config --global credential.helper "/bin/bash ~/git-credentials-helper.sh"
          
          echo "Environment prepared for semantic-release"
      
      - name: Deploy git tag via semantic-release
        uses: cycjimmy/semantic-release-action@0a51e81a6baff2acad3ee88f4121c589c73d0f0e # v4.2.0
        id: semantic-release
        with:
          # version numbers below can be in many forms: M, M.m, M.m.p
          # version should be greater than the 22.0.1 (https://github.com/semantic-release/semantic-release/releases/tag/v22.0.1)
          # because previous version had a bug in commit analyzer
          semantic_version: latest
          extra_plugins: |
            conventional-changelog-conventionalcommits@8
            @semantic-release/github
            @semantic-release/exec
            @semantic-release/git
        env:
          # Needs to push git commits to repo. Needs write access.
          # Using GitHub App token for permissions to bypass branch protection
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          # Add debug mode and dry run as environment variables
          GITHUB_DEBUG: "true" # Enable debug logging
          DEBUG: "semantic-release:*" # Enable semantic-release specific debugging
          DRY_RUN: "false" # Set to true if you want to test without actual releases
      
      # Add a fallback step to try to push directly with git if semantic-release fails
      - name: Fallback - Try direct git push if semantic-release failed
        if: failure()
        run: |
          echo "Trying direct git push as fallback..."
          
          # First check if there are any changes
          if [ -z "$(git status --porcelain)" ]; then 
            echo "No changes to commit"
          else
            # Set git config (in case it wasn't set properly)
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            # Try to push with token explicitly set in the URL
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo "Attempting to push to $BRANCH branch"
            
            # Use the GH App token for authentication
            git push https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${{ github.repository }}.git $BRANCH
            
            echo "Fallback push completed"
          fi
      
      # Debug repository rules if the workflow continues to fail
      - name: Debug repository settings
        if: failure()
        run: |
          echo "Checking repository rules and branch protection settings..."
          
          # Check branch protection settings via API
          echo "Fetching branch protection settings for current branch..."
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $BRANCH"
          
          # Use curl to check branch protection
          curl -s -H "Authorization: token ${{ steps.generate_token.outputs.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/branches/$BRANCH/protection" | jq .
          
          echo "Checking repository rules..."
          curl -s -H "Authorization: token ${{ steps.generate_token.outputs.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/rules" | jq .
               
          echo "This information may help diagnose why the GitHub App token isn't working with branch protection rules"

 