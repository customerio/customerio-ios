name: Tests
on: [push, pull_request]

# Thanks, https://swiftpackageindex.com/docs/builds for help coming up with *how* we build the artifacts. Swift build on Linux, XCode build on mac. Changing the XCode version to a specific version is how to set what version of Swift we want to test against on macOS. This is more real-world but also because I encountered issues with trying to install a Swift version in the macOS environment and try to run tests on it. 
# See example commands by choosing a package: https://swiftpackageindex.com/nativedevbr/swift-log/builds and viewing the build information for each environment to see the commands run in that environment. 

jobs:
  xcode-test:
    strategy:
      matrix:
        # 12.4 = swift 5.3
        # 12.5 = swift 5.4
        # 13.0 = swift 5.5
        # Thanks: https://swiftly.dev/swift-versions and https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md#xcode
        xcode: ["12.4", "12.5", "13.0"]
    runs-on: macos-11
    name: XCode macOS tests (xcode ${{ matrix.xcode }})
    # skip if '[skip ci]' exists in commit message 
    if: ${{ !contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[skip ci]') }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}
    # If running tests fails, sometimes it's because of scheme name is wrong. This gives us all available schemes. 
    - name: Get XCode schemes (xcode ${{ matrix.xcode }})
      run: xcrun xcodebuild -list

    # run command made with help from `fastlane scan`. Running `scan` will output the command that it uses to run tests that you can use for help constructing test command. 
    # `-scheme` name found by running: `xcrun xcodebuild -list` (or, see output of workflow run)
    # `-destination` chosen to be a simulator that *all* xcode versions include. Help: https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md#installed-simulators
    - name: Run tests (xcode ${{ matrix.xcode }})
      run: xcrun xcodebuild -scheme Customer.io-Package -destination 'platform=iOS Simulator,name=iPhone 8' build test | xcpretty  --report html --output 'test-report.html' --report junit --output 'test-report.xml'

    - name: Upload test report 
      uses: actions/upload-artifact@v2
      with:
        name: xcode-test-report
        path: test-report.*
      if: ${{ always() }}
    - name: Publish test results
      uses: mikepenz/action-junit-report@v2      
      with:
        check_name: XCode macOS tests (xcode ${{ matrix.xcode }}) - Results
        report_paths: test-report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_failure: true 
        require_tests: true 
      if: ${{ always() }} # if running tests fails, we still want to parse the test results     
  
  spm-test:
    strategy:
      matrix: 
        swift: ["5.3", "5.4"]
        os: [ubuntu-latest]
        # Can add `-arch X` to `swift build` command to compile for an architecture. Examples: -arch arm64, -arch x86_64
    runs-on: ${{ matrix.os }}
    name: SPM Linux tests (swift ${{ matrix.swift }})
    # skip if '[skip ci]' exists in commit message 
    if: ${{ !contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[skip ci]') }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Swift
      uses: fwal/setup-swift@v1
      with:
          swift-version: '${{ matrix.swift }}'

    # Must use `--parallel` to use `--xunit-output`. 
    # `--enable-test-discovery` is for older Swift versions to work. Should be able to move when min SDK is 5.4
    - name: Run tests (swift ${{ matrix.swift }})
      run: swift test --parallel --xunit-output test-report.xml --enable-test-discovery

    - name: Upload test report 
      uses: actions/upload-artifact@v2
      with:      
        name: spm-test-report
        path: test-report.*
      if: ${{ always() }}
    - name: Publish test results
      uses: mikepenz/action-junit-report@v2      
      with:
        check_name: SPM Linux tests (swift ${{ matrix.swift }}) - Results 
        report_paths: test-report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_failure: true 
        require_tests: true 
      if: ${{ always() }} # if running tests fails, we still want to parse the test results     
      