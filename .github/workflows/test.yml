name: Tests
on: [push, pull_request]

# Thanks, https://swiftpackageindex.com/docs/builds for help coming up with *how* we build the artifacts. Swift build on Linux, XCode build on mac. Changing the XCode version to a specific version is how to set what version of Swift we want to test against on macOS. This is more real-world but also because I encountered issues with trying to install a Swift version in the macOS environment and try to run tests on it. 
# See example commands by choosing a package: https://swiftpackageindex.com/nativedevbr/swift-log/builds and viewing the build information for each environment to see the commands run in that environment. 

jobs:
  xcode-test:
    strategy:
      matrix:
        # 11.3.1 = swift 5.1
        # 11.7 = swift 5.2
        # 12.4 = swift 5.3
        # 12.5 = swift 5.4 (not available because macos-11 is private preview, only on github)
        # Thanks: https://swiftly.dev/swift-versions and https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md#xcode
        xcode: ["11.3.1", "11.7", "12.4"]
    runs-on: macos-10.15
    name: XCode macOS tests (xcode ${{ matrix.xcode }})
    # skip if '[skip ci]' exists in commit message 
    if: ${{ !contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[skip ci]') }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}

    # run command made with help from `fastlane scan`. Using `swift` 5.4 CLI `swift generate-xcodeproj` (may be deprecated now) generates an xcodeproj directory that fastlane scan requires. `scan` will output the command that it uses to run tests. 
    # `-scheme` name found by running: `xcrun xcodebuild -list`
    # `-destination` chosen to be a simulator that *all* xcode versions include. Help: https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md#installed-simulators
    - name: Run tests (xcode ${{ matrix.xcode }})
      run: xcrun xcodebuild -scheme Customer.io -destination 'platform=iOS Simulator,name=iPhone 8' build test | xcpretty  --report html --output 'test-report.html' --report junit --output 'test-report.xml'

    - name: Upload test report 
      uses: actions/upload-artifact@v2
      with:
        name: xcode-test-report
        path: test-report.*
      if: ${{ always() }}
    - name: Publish test results
      uses: mikepenz/action-junit-report@v2      
      with:
        check_name: XCode junit report
        report_paths: test-report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_failure: true 
        require_tests: true 
      if: ${{ always() }} # if running tests fails, we still want to parse the test results     
  
  spm-test:
    strategy:
      # must use different OS for older swift versions. See: https://github.com/fwal/setup-swift/issues/196#issuecomment-810476279
      matrix: 
        swift: ["5.3", "5.4"]
        os: [ubuntu-latest]
        include:
        - swift: "5.2"
          os: ubuntu-18.04
        # Can add `-arch X` to `swift build` command to compile for an architecture. Examples: -arch arm64, -arch x86_64
    runs-on: ${{ matrix.os }}
    name: SPM Linux tests (swift ${{ matrix.swift }})
    # skip if '[skip ci]' exists in commit message 
    if: ${{ !contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[skip ci]') }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Swift
      uses: fwal/setup-swift@v1
      with:
          swift-version: '${{ matrix.swift }}'

    # Must use `--parallel` to use `--xunit-output`. 
    # `--enable-test-discovery` is for older Swift versions to work. 
    - name: Run tests (swift ${{ matrix.swift }})
      run: swift test --parallel --xunit-output test-report.xml --enable-test-discovery

    - name: Upload test report 
      uses: actions/upload-artifact@v2
      with:      
        name: spm-test-report
        path: test-report.*
      if: ${{ always() }}
    - name: Publish test results
      uses: mikepenz/action-junit-report@v2      
      with:
        check_name: SPM junit report
        report_paths: test-report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_failure: true 
        require_tests: true 
      if: ${{ always() }} # if running tests fails, we still want to parse the test results     