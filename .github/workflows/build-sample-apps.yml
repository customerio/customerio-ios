name: Build sample apps 

on: 
  pull_request: # build sample apps for every commit pushed to an open pull request (including drafts)
  # release: # build sample apps for every git tag created. These are known as "stable" builds that are suitable for people outside the mobile team. 
  #  types: [published]

concurrency: # cancel previous workflow run if one exists. 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-pr-comment:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # to be able to comment on PR
    outputs:
      comment-id: ${{ steps.create-comment.outputs.comment-id }}
    steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: existing-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: <!-- sample app builds --> 
    
    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v3
      id: create-comment
      with:
        comment-id: ${{ steps.existing-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          <!-- sample app builds --> 
          # Sample app builds ðŸ“±
          
          Below you will find the list of the latest versions of the sample apps. It's recommended to always download the latest builds of the sample apps to accurately test the pull request. 

          ---
          ${{ steps.build.outputs.build-log }}
        edit-mode: replace # replace the existing comment with new content since we are creating new builds 

  build-sample-apps:
    needs: [update-pr-comment] # wait for PR comment to be created saying new builds are being made. 
    permissions:
      pull-requests: write # comment on pull request with build information 
    strategy:
      matrix: # Use a matrix allowing us to build multiple apps in parallel. Just add an entry to the matrix and it will build! 
        sample-app: 
        # List all sample apps you want to have compiled. 
        # List item is name of directory inside of "Apps" directory for the corresponding app to compile. 
        - "CocoaPods-FCM"

    runs-on: macos-13
    name: Building app...${{ matrix.sample-app }}
    steps:
    - uses: actions/checkout@v3

    - name: Install tools used in workflow
      run: |
        brew install xcbeautify    
        brew install sd

    - name: Set up Xcode to version we determine 
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 14
    
    - name: Install tools from Gemfile (ruby language) used for building our apps with 
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true # cache tools to make builds faster in future 

    - name: Does ${{ matrix.sample-app }} use CocoaPods? 
      id: check_podfile_exists
      uses: andstor/file-existence-action@v1
      with:
        files: "Apps/${{ matrix.sample-app }}/Podfile"

    - name: Cache CocoaPods downloaded dependencies for faster builds in the future 
      if: steps.check_podfile_exists.outputs.files_exists == 'true'
      uses: actions/cache@v3
      with:
        path: "Apps/${{ matrix.sample-app }}/Pods"
        key: ${{ runner.os }}-${{ matrix.sample-app}}-Pods
        restore-keys: |
          ${{ runner.os }}-${{ matrix.sample-app}}-Pods

    - name: pod install if app uses CocoaPods 
      if: steps.check_podfile_exists.outputs.files_exists == 'true'
      run: pod install --repo-update
      working-directory: "Apps/${{ matrix.sample-app }}"

      # - name: Dump GitHub Action metadata because Fastlane uses it. Viewing it here helps debug JSON parsing code in Firebase. 
    #   run: cat $GITHUB_EVENT_PATH

    - name: Build app via Fastlane 
      uses: maierj/fastlane-action@v3.0.0
      with:
        lane: "build"
        subdirectory: "Apps/${{ matrix.sample-app }}"
      env: 
        GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ secrets.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}
        FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64: ${{ secrets.FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT_CREDS_B64 }}
    
    - name: Update sample builds PR comment with build information 
      if: ${{ github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ needs.update-pr-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        # the variables APP_BUILD_NUMBER, APP_VERSION_STRING are created when fastlane runs "build". 
        body: |
          * ${{ matrix.sample-app }}: `${{ env.APP_VERSION_STRING }} (${{ env.APP_BUILD_NUMBER }})`
        edit-mode: append

    - name: Update sample builds PR comment with build failure message 
      if: ${{ failure() }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ needs.update-pr-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          * ${{ matrix.sample-app }}: Build failed. See [CI job logs](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to determine the issue and try re-building. 
        edit-mode: append
