name: Simulate merging a PR 

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BRANCH_TO_CREATE_SIMULATING_MERGE: "temp-simulate_merge_pr_${{ github.event.pull_request.number }}"
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  simulate-merge-pr:
    runs-on: ubuntu-latest
    name: Simulate merging PR
    permissions: # permissions must match that of a real deployment because auth is tested in dry-run
      contents: write # for pushing commits and tags 
    steps:
    - uses: actions/checkout@v3

    # Squash all commits of the current branch into 1 commit. Each command below is executed as 1 step in this job 
    # to act as comments explaining each step of the process. 
    # Help with how to squash and merge a PR: https://stackoverflow.com/a/5201642
    - name: Fetch all branches so we can reference origin/main branch
      run: git fetch --depth=1
    - name: Configure git with name and email or git will throw error when trying to make a commit 
      run: git config user.name "GitHub" && git config user.email "noreply@github.com"
    - name: Creating new branch to make the squashed commit on. Must be checked out to a branch or commit will not succeed. 
      run: git checkout -b "temp-squash-commits-branch"
    - name: Squash all commits in PR into 1 commit. Using the title of this PR as the commit message. 
      run: git reset --soft origin/main && git commit -m "${{ github.event.pull_request.title }}"
    - name: Run git log for debugging purposes to see if 1 commit was created as we expected 
      run: git log 
    
    # Merge the new squashed commit into the main branch to simulate merging this PR into main branch 
    - name: Pull the main branch locally so we can use it 
      run: git checkout main && git pull
    - name: Checkout a new branch that will represent the result of merging this pull request
      run: git checkout -b "${{ env.BRANCH_TO_CREATE_SIMULATING_MERGE }}"
    - name: Merge the squashed commit that we made into the local main branch 
      run: git merge "temp-squash-commits-branch"
    - name: Run git log for debugging purposes to see if the merge shows 1 new squashed commit got merged successfully 
      run: git log 

    # Push new branch 
    - name: Assert that we are on the correct branch before pushing. We don't want to overwrite another branch in the repo by accident. 
      uses: GuillaumeFalourd/assert-command-line-output@v2.1
      with:
        command_line: git branch --show-current
        contains: ${{ env.BRANCH_TO_CREATE_SIMULATING_MERGE }}
    - name: Push new branch, force push if the branch already exists 
      run: git push --force origin "${{ env.BRANCH_TO_CREATE_SIMULATING_MERGE }}"        

  # Now that we created a new branch that represents what the git commit history will look like after merging the PR, 
  # run the deployment test from that new branch. 
  start-test-deployment-workflow:
    runs-on: ubuntu-latest
    needs: simulate-merge-pr
    name: Start test deployment 
    permissions:
      actions: write # be able to start a new github action workflow 
    steps:
    - uses: actions/checkout@v3

    - name: Start workflow that runs test deployment on new branch ${{ env.BRANCH_TO_CREATE_SIMULATING_MERGE }}
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: test-deployment.yml
        # ref is the branch or commit to run test-deployment from. We want to run the workflow from the new branch that we created so the deployment test runs from that branch. 
        ref: ${{ env.BRANCH_TO_CREATE_SIMULATING_MERGE }}
        inputs: '{ "pr_number": "${{ env.PR_NUMBER }}" }'