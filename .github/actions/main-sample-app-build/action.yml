name: Get or save latest main branch sample app build
description: Use to either save or get the latest sample app build for the APN sample app, from the main branch. The build is used to generate the SDK size diff reports. 

inputs:
  # If you want to save a new build, pass in this input. If you want to get the latest build, leave this input out.
  set-latest-main-build:
    description: 'The name of the xcarchive for the APN sample app to save. Example: "App.xcarchive"'
    type: string
    required: false 
    default: ''
  GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64:
    description: 'Maps to the secret, GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64. Used for code signing. See the Fastlane config files to learn more.'
    type: string
    required: true

outputs:
  apn-app-xcarchive-path:
    description: 'The full relative path to the xcarchive for the APN sample app. Example: "Apps/APN-UIKit/build/MainBranchApp.xcarchive"'
    value: ${{ steps.set-action-outputs.outputs.apn-app-xcarchive-path }}
  apn-app-xcarchive-name:
    description: 'The name of the xcarchive for the APN sample app. Example: "MainBranchApp.xcarchive"'
    value: ${{ steps.set-action-outputs.outputs.apn-app-xcarchive-name }}

runs:
  using: "composite"
  steps:
    - name: Setting environment variables for convenience in future steps 
      shell: bash
      # Use each of the set variables in future steps like: ${{ env.APN_SAMPLE_APP_BUILD_PATH }}      
      run: |
        echo "APN_SAMPLE_APP_BUILD_PATH=Apps/APN-UIKit/build" >> $GITHUB_ENV
        echo "BUILD_FILE_NAME=MainBranchApp.xcarchive" >> $GITHUB_ENV
        echo "CACHE_KEY_BASE=APN-UIKit-build-main-" >> $GITHUB_ENV

    - name: Download latest main sample app build to compare against 
      id: restore-build
      if: ${{ inputs.set-latest-main-build == '' }}
      uses: actions/cache/restore@v4
      with:
        # The key input is required for this action to run. But whatever value we pass in, it will not work for our use case. Therefore, this value is a placeholder value. 
        # The restore-keys param is what will download the latest cache version for us.
        key: this-is-a-placeholder-because-value-required-by-action
        path: ${{ env.APN_SAMPLE_APP_BUILD_PATH }}/${{ env.BUILD_FILE_NAME }} # the path where the build will be restored to 
        # The restore key is what will download the latest cache entry for us. 
        # 
        # How it works: "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        restore-keys: |
          ${{ env.CACHE_KEY_BASE }}
    
    # If the cache is found, we set the cache-hit status to true.
    # This is useful for future steps to know if the cache was found or not.
    - name: Set cache-hit and should-save-build values
      shell: bash
      run: |
        build_cache_hit="${{ steps.restore-build.outputs.cache-hit || 'false' }}"
        echo "BUILD_CACHE_HIT=$build_cache_hit" >> $GITHUB_ENV
        echo "Cache Hit Value: $build_cache_hit"

    # If the cache is not found, we need to build the sample app for main branch.
    # So we checkout the main branch and build the sample app.
    - name: Checkout main branch
      if: ${{ env.BUILD_CACHE_HIT == 'false' }}
      uses: actions/checkout@v4
      with:
        ref: main

    # Build the sample app for main branch if the cache is not found.
    - name: Make a build of the sample app to generate report for 
      if: ${{ env.BUILD_CACHE_HIT == 'false' }}
      uses: ./.github/actions/build-sample-app
      id: fallback-build-main
      with:
        apn-or-fcm: 'APN'
        sample-app: 'APN-UIKit'
        # Pass in a hard-coded version and build number to ensure that all sample app builds that are compiled for SDK size reports are consistent.
        # When we compare size reports between different builds, we want to ensure that the only difference is the SDK code that was modified in a PR. 
        fastlane-build-args: '{"app_version": "1.0.0", "build_number": "1"}'
        # workspace credentials do not matter since we are not using this app build. 
        customerio-workspace-siteid: "12345"
        customerio-workspace-cdp-api-key: "12345"      
        GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64: ${{ inputs.GOOGLE_CLOUD_MATCH_READONLY_SERVICE_ACCOUNT_B64 }}

    # It's easiest if the latest main build always has the same name that easily identifies it. 
    # Therefore, we take the input build and copy it to have the name that we expect to upload.
    - name: If saving a new build, create copy that we will save. 
      if: ${{ inputs.set-latest-main-build != '' }}
      working-directory: ${{ env.APN_SAMPLE_APP_BUILD_PATH }}
      shell: bash
      run: |
        cp -r ${{ inputs.set-latest-main-build }} ${{ env.BUILD_FILE_NAME }}

    # If the cache was not found, we need to copy the fallback build to the expected name.
    # This is similar to the previous step, but we are doing it for the case where cache was not found.
    - name: If cache was not found, copy fallback build to expected name
      if: ${{ env.BUILD_CACHE_HIT == 'false' }}
      working-directory: ${{ env.APN_SAMPLE_APP_BUILD_PATH }}
      shell: bash
      run: |
        cp -r ${{ steps.fallback-build-main.outputs.app-xcarchive-name }} ${{ env.BUILD_FILE_NAME }}

    - name: Save latest main sample app build
      if: ${{ inputs.set-latest-main-build != '' || env.BUILD_CACHE_HIT == 'false' }}
      uses: actions/cache/save@v4
      with:
        # the key must be unique. caches are immutable so the key must always be unique. 
        # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
        key: ${{ env.CACHE_KEY_BASE }}${{ github.run_id }}
        path: ${{ env.APN_SAMPLE_APP_BUILD_PATH }}/${{ env.BUILD_FILE_NAME }}        

    - name: Set action output values
      id: set-action-outputs
      shell: bash
      run: |
        echo "apn-app-xcarchive-path=$(echo ${{ env.APN_SAMPLE_APP_BUILD_PATH }}/${{ env.BUILD_FILE_NAME }})" >> $GITHUB_OUTPUT
        echo "apn-app-xcarchive-name=$(echo ${{ env.BUILD_FILE_NAME }})" >> $GITHUB_OUTPUT